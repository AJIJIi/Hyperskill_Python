symbols = '         '

def hasRowOf(character):
    return symbols[0] == character and symbols[1] == character and symbols[2] == character \
        or symbols[3] == character and symbols[4] == character and symbols[5] == character \
        or symbols[6] == character and symbols[7] == character and symbols[8] == character \
        or symbols[0] == character and symbols[3] == character and symbols[6] == character \
        or symbols[1] == character and symbols[4] == character and symbols[7] == character \
        or symbols[2] == character and symbols[5] == character and symbols[8] == character \
        or symbols[0] == character and symbols[4] == character and symbols[8] == character \
        or symbols[2] == character and symbols[4] == character and symbols[6] == character

def printGrid():
    print("---------")
    print(f"| {symbols[0]} {symbols[1]} {symbols[2]} |")
    print(f"| {symbols[3]} {symbols[4]} {symbols[5]} |")
    print(f"| {symbols[6]} {symbols[7]} {symbols[8]} |")
    print("---------")

printGrid()

while True:
    coordinates = input().split()
    if not all(coordinate.isnumeric() for coordinate in coordinates):
        print("You should enter numbers!")
        continue
    coordinates[0] = int(coordinates[0])
    coordinates[1] = int(coordinates[1])
    
    if coordinates[0] > 3 or coordinates[0] < 1 or coordinates[1] > 3 or coordinates[1] < 1:
        print("Coordinates should be from 1 to 3!")
        continue

    newIndex = (coordinates[0] - 1) * 3 + coordinates[1] - 1
    
    if symbols[newIndex] == 'X' or symbols[newIndex] == 'O':
        print("This cell is occupied! Choose another one!")
        continue
    
    symbols = symbols[:newIndex] + 'X' + symbols[newIndex + 1:]
    printGrid()

    if hasRowOf('X'):
        print('X wins')
        break
    elif hasRowOf('O'):
        print('O wins')
        break
    elif symbols.count("X") + symbols.count("O") == 9:
        print('Draw')
        break
